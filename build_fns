#!/bin/sh

BUILD_DIR=${CI_BUILDS_DIR:-$HOME/build-docker}
echo "Using build dir $BUILD_DIR"

CARGO_HOME=$BUILD_DIR/cargo-home
CARGO_TARGET_DIR=$BUILD_DIR/cargo-target-${GITHUB_REPOSITORY:-default}

CARGO_HOME_MOUNT=/usr/src/cargo-home
CARGO_TARGET_DIR_MOUNT=/usr/src/cargo-target

BUILDER_IMAGE=registry.gitlab.com/katlex/github-runner:rbp-rust-builder
IMAGE_REGISTRY=registry.gitlab.com/katlex/rbp

COMMIT_BASED_VERSION="$(date '+%m-%d')-${GITHUB_SHA:0:7}"

update_builder_image() {
  docker pull $BUILDER_IMAGE
}

run_in_docker() {
  local INTERACTIVE=
  case "$-" in
    *i*) INTERACTIVE=-t ;;
  esac

  mkdir -p $CARGO_HOME || true
  mkdir -p $CARGO_TARGET_DIR || true

  docker run -i $INTERACTIVE --rm \
    -v ${GITHUB_WORKSPACE:-$PWD}:/usr/src/app \
    -v $CARGO_HOME:$CARGO_HOME_MOUNT \
    -v $CARGO_TARGET_DIR:$CARGO_TARGET_DIR_MOUNT \
    -e CARGO_HOME=$CARGO_HOME_MOUNT  \
    -e CARGO_TARGET_DIR=$CARGO_TARGET_DIR_MOUNT \
    -e DATABASE_URL=$DATABASE_URL \
    --workdir /usr/src/app \
    $BUILDER_IMAGE \
    bash -eo pipefail -c "$@"
}

build_source() {
  run_in_docker '
    cargo test --release --locked
    cargo build --release --locked
  '
}

build_image() {
  local APP=$1
  local DOCKER_FILE=$2
  rm -rf release || true
  mkdir release || true
  cp ${CARGO_TARGET_DIR}/release/${APP} release/
  docker build -t ${APP} \
    --build-arg APP=${APP} \
    -f ${DOCKER_FILE:-Dockerfile} \
    .
}

build_ui_source() {
  local APP=$1
  run_in_docker '
    print_info() {
      echo -e '\''\033[1;35m'\''$@$'\''\033[0m'\'' # light purple
    }

    cd "'${APP}'"
    print_info ^^ installing npm deps
    yarn

    print_info ^^ building css
    npx tailwindcss build styles.css -o pkg/styles.css

    print_info ^^ running wasm-pack
    wasm-pack build --release --target web --mode no-install -- --locked 

    print_info ^^ optimizing wasm with binaryen toolkit
    wasm-opt -Oz -o pkg/"'${APP}'"_bg.wasm~ pkg/"'${APP}'"_bg.wasm
    mv pkg/"'${APP}'"_bg.wasm~ pkg/"'${APP}'"_bg.wasm

    print_info ^^ rolling up js
    rollup -c

    print_info ^^ preparing release # copies build artefacts outside of docker container so to make it available for build_ui_image

    rm -rf ${CARGO_TARGET_DIR}/release/"'${APP}'" || true
    mkdir -p ${CARGO_TARGET_DIR}/release/"'${APP}'"/pkg

    cp index.html ${CARGO_TARGET_DIR}/release/"'${APP}'"
    cp pkg/bundle.js ${CARGO_TARGET_DIR}/release/"'${APP}'"/pkg
    cp pkg/styles.css ${CARGO_TARGET_DIR}/release/"'${APP}'"/pkg
    cp pkg/"'${APP}'"_bg.wasm ${CARGO_TARGET_DIR}/release/"'${APP}'"/pkg

    print_info ^^ cleaning up
    rm -rf node_modules
    rm -rf pkg
  '
}

build_ui_image() {
  local APP=$1
  rm -rf release || true
  mkdir -p release/html || true
  cp -R ${CARGO_TARGET_DIR}/release/${APP}/* release/html
  cp ${APP}/nginx.conf release
  docker build -f ui.Dockerfile -t ${APP} release
}

publish_image() {
  local APP=$1
  local VERSION=${2:-latest}
  local IMAGE_PATH=${IMAGE_REGISTRY}/${APP}:${VERSION}
  echo "Pushing to ${IMAGE_PATH}"
  docker tag ${APP} ${IMAGE_PATH}
  docker tag ${APP} ${IMAGE_PATH}
  docker push ${IMAGE_PATH}
  echo Published ${APP}
  docker images "${APP}"
}
