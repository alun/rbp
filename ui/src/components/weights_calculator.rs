use core::GetWeightsQuery;

use crate::services::RbpService;
use anyhow::Result;
use yew::{
  html, services::fetch::FetchTask, ChangeData, ComponentLink, Html, Properties, ShouldRender,
};
use yewtil::ptr::Mrc;

pub enum Msg {
  WeightsResultsLoaded(Result<Vec<f64>>),
  TickersInputChanged(ChangeData),
}

#[derive(Properties, Clone, PartialEq)]
pub struct Props {
  pub rbp_service: Mrc<RbpService>,
}

pub struct Component {
  get_weights_task: Option<FetchTask>,
  link: ComponentLink<Self>,
  fetching_tickers: Vec<String>,
  fetched_tickers: Vec<String>,
  fetched_weights: Vec<f64>,
  props: Props,
}

impl yew::Component for Component {
  type Message = Msg;
  type Properties = Props;

  fn create(props: Self::Properties, link: ComponentLink<Self>) -> Self {
    let mut instance = Self {
      get_weights_task: None,
      link,
      props,
      fetching_tickers: vec![],
      fetched_tickers: vec![],
      fetched_weights: vec![],
    };
    log::info!("Weigths calculator component created");

    instance
  }

  fn update(&mut self, msg: Self::Message) -> ShouldRender {
    match msg {
      Msg::WeightsResultsLoaded(weights) => match weights {
        Ok(weights) => {
          self.fetched_tickers = vec![];
          self.fetched_tickers.append(&mut self.fetching_tickers);
          self.fetched_weights = weights;
        }
        Err(_) => {} // TODO show error
      },
      Msg::TickersInputChanged(change_data) => match change_data {
        ChangeData::Value(value) => {
          let tickers: Vec<String> = value
            .split(",")
            .map(str::trim)
            .filter(|s| !s.is_empty())
            .map(str::to_string)
            .collect();
          self.fetching_tickers = tickers.clone();
          self.get_weigths(GetWeightsQuery { tickers })
        }
        _ => {}
      },
    }
    true
  }

  fn change(&mut self, _: Self::Properties) -> ShouldRender {
    log::info!("Weigths calculator properties changed");
    false
  }

  fn view(&self) -> Html {
    html! {
      <>
      <div>
        <input onchange=self.link.callback(Msg::TickersInputChanged) value="FB, AAPL, GOOGL" />
      </div>
      <div>
        {self.build_weights_results()}
      </div>
      </>
    }
  }
}

struct TickerWeight {
  ticker: String,
  weight: f64,
}

impl Component {
  // TODO can this be generated by macro?
  fn get_weigths(&mut self, query: GetWeightsQuery) {
    if self.get_weights_task.is_some() {
      self.get_weights_task.take();
    }
    self.get_weights_task = Some(
      self
        .props
        .rbp_service
        .as_ref()
        .get_weigths(query, self.link.callback(Msg::WeightsResultsLoaded)),
    );
  }

  fn build_weights_results(&self) -> Html {
    let render_ticker_weight = |(ticker, weight): (&String, &f64)| {
      html! {
        <div>
          <span>{ticker}</span>
          <span>{":"}</span>
          <span>{weight}</span>
        </div>
      }
    };

    html! {
      <>
        { for self.fetched_tickers.iter().zip(self.fetched_weights.iter()).map(render_ticker_weight) }
      </>
    }
  }
}
